#!/usr/bin/env python
# -*- coding: latin-1 -*-
#
#   Copyright 2016-2019 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
# $Author: frederic $
# $Date: 2016/07/11 14:50:43 $
#       $Id: resamp1tc,v 1.12 2016/07/11 14:50:43 frederic Exp $
#

from __future__ import print_function, division

import sys
import getopt

import rapidtide.io as tide_io
import rapidtide.resample as tide_resample
import scipy as sp
import numpy as np
import matplotlib.pyplot as plt


def usage():
    print("resamp1tc - resample a timeseries file")
    print("")
    print(
        "usage: resamp1tc infilename[:COLNUM] insamplerate outputfile outsamplerate [--nodisplay]"
    )
    print("")
    print("required arguments:")
    print(
        "\tinputfile[:COLNUM] - text file containing a timeseries.  Select column COLNUM if multicolumn file"
    )
    print("\tinsamplerate       - the sample rate of the input file in Hz")
    print("\toutputfile         - the name of the output text file")
    print("\toutsamplerate      - the sample rate of the output file in Hz")
    print("")
    print(" options:")
    print("\t--nodisplay        - do not plot the data (for noninteractive use)")
    print("\t--noantialias      - disable antialiasing filter when downsampling)")
    print("")
    return ()


def main():
    display = True
    antialias = True

    # get the command line parameters
    nargs = len(sys.argv)
    if nargs < 5:
        usage()
        exit()
    filename = sys.argv[1]
    insamplerate = float(sys.argv[2])
    outputfile = sys.argv[3]
    outsamplerate = float(sys.argv[4])

    # now scan for optional arguments
    try:
        opts, args = getopt.getopt(
            sys.argv[5:], "s", ["nodisplay", "noantialias", "help"]
        )
    except getopt.GetoptError as err:
        # print help information and exit:
        print(str(err))  # will print something like "option -x not recognized"
        usage()
        sys.exit(2)

    for o, a in opts:
        if o == "--nodisplay":
            display = False
            print("turning display off")
        elif o == "--noantialias":
            antialias = False
            print("turning off antialiasing")
        else:
            assert False, "unhandled option"

    intimestep = 1.0 / insamplerate
    outtimestep = 1.0 / outsamplerate
    infilename, colspec = tide_io.parsefilespec(filename)

    inputdata = np.transpose(tide_io.readvecs(infilename, colspec=colspec))
    if np.shape(inputdata)[1] > 1:
        print("specify only one column for input file 1")
        sys.exit()
    else:
        inputdata = inputdata[:, 0]

    outputdata = tide_resample.arbresample(
        inputdata, insamplerate, outsamplerate, decimate=False, antialias=antialias
    )
    in_t = intimestep * sp.linspace(
        0.0, 1.0 * len(inputdata), len(inputdata), endpoint=True
    )
    out_t = outtimestep * sp.linspace(
        0.0, len(outputdata), len(outputdata), endpoint=True
    )
    if len(out_t) < len(outputdata):
        outputdata = outputdata[0 : len(out_t)]

    if display:
        plt.plot(in_t, inputdata, "k")

    tide_io.writevec(outputdata, outputfile)
    if display:
        plt.plot(out_t, outputdata, "r")
        plt.legend(("original signal", "resampled"))

    if display:
        plt.show()


if __name__ == "__main__":
    main()
