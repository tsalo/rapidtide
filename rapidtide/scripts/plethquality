#!/usr/bin/env python
# -*- coding: latin-1 -*-
#
#   Copyright 2016-2019 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


from __future__ import print_function, division
import getopt
import matplotlib.pyplot as plt
import numpy as np
import os
import sys
import glob
from scipy.stats import skew
import rapidtide.io as tide_io


def plethquality(waveform, Fs, S_windowsecs=5.0, debug=False):
    """

    Parameters
    ----------
    waveform: array-like
        The cardiac waveform to be assessed
    Fs: float
        The sample rate of the data
    S_windowsecs: float
        Window duration in seconds.  Defaults to 2.0 (optimal according to Elgendi
    debug: boolean
        Turn on extended output

    Returns
    -------
    S_sqi_mean: float
        The mean value of the quality index over all time
    S_std_mean: float
        The standard deviation of the quality index over all time
    S_waveform: array
        The quality metric over all timepoints


    Calculates the windowed skewness quality metrics described in Elgendi, M. "Optimal Signal Quality Index for
    Photoplethysmogram Signals". Bioengineering 2016, Vol. 3, Page 21 3, 21 (2016).
    """
    # calculate S_sqi over a sliding window.  Window size should be an odd number of points.
    S_windowpts = int(np.round(S_windowsecs * Fs, 0))
    S_windowpts += 1 - S_windowpts % 2
    S_waveform = waveform * 0.0
    if debug:
        print("S_windowsecs, S_windowpts:", S_windowsecs, S_windowpts)
    for i in range(0, len(waveform)):
        startpt = np.max([0, i - S_windowpts // 2])
        endpt = np.min([i + S_windowpts // 2, len(waveform)])
        S_waveform[i] = skew(waveform[startpt : endpt + 1], nan_policy="omit")
        if debug:
            print(i, startpt, endpt, endpt - startpt + 1, S_waveform[i])

    S_sqi_mean = np.mean(S_waveform)
    S_sqi_std = np.std(S_waveform)

    return S_sqi_mean, S_sqi_std, S_waveform


def usage():
    print("usage: plethquality inputfile outputfile samplerate")
    print("")
    print("required arguments:")
    print(
        "    inputfile                 - the name of a text file containing a cardiac signal"
    )
    print("    outputfile                - the name of the output text file")
    print("    samplerate                - data samplerate in Hz")
    print("")
    print("optional arguments:")
    print("    --nodisp                  - do not plot quality waveform")


def main():
    # handle required args first
    if len(sys.argv) < 4:
        usage()
        sys.exit()
    inputfile = sys.argv[1]
    outputfile = sys.argv[2]
    Fs = float(sys.argv[3])

    display = True

    # now scan for optional arguments
    try:
        opts, args = getopt.getopt(sys.argv[4:], "", ["nodisp", "help"])
    except getopt.GetoptError as err:
        # print(help information and exit:
        print(str(err))  # will print something like "option -a not recognized"
        usage()
        sys.exit(2)

    for o, a in opts:
        if o == "--nodisp":
            display = False
        else:
            assert False, "unhandled option"

    # read in the data
    plethdata = tide_io.readvec(inputfile)

    # calculate the quality score
    s_mean, s_std, quality = plethquality(plethdata, Fs)
    print(inputfile, s_mean, "+/-", s_std)
    tide_io.writevec(quality, outputfile)

    if display:
        plt.figure()
        plt.plot(quality)
        plt.show()


if __name__ == "__main__":
    main()
