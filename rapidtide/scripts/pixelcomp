#!/usr/bin/env python
# -*- coding: latin-1 -*-
#
#   Copyright 2016-2019 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#       $Author: frederic $
#       $Date: 2016/01/25 20:17:55 $
#       $Id: pixelcomp,v 1.4 2016/01/25 20:17:55 frederic Exp $
#
from __future__ import print_function, division

import getopt
import rapidtide.io as tide_io
import matplotlib.pyplot as plt
import sys
import numpy as np


def bland_altman_plot(data1, data2, *args, **kwargs):
    data1 = np.asarray(data1)
    data2 = np.asarray(data2)
    mean = np.mean([data1, data2], axis=0)
    diff = data1 - data2  # Difference between data1 and data2
    md = np.mean(diff)  # Mean of the difference
    sd = np.std(diff, axis=0)  # Standard deviation of the difference

    plt.scatter(mean, diff, *args, **kwargs)
    plt.axhline(md, color="gray", linestyle="--")
    plt.axhline(md + 2 * sd, color="gray", linestyle="--")
    plt.axhline(md - 2 * sd, color="gray", linestyle="--")


def usage():
    print(
        "usage: pixelcomp inputfile1 maskfile1 inputfile2 maskfile2 outputfile [-l] [-d] [--nodisplay]"
    )
    print("")
    print("required arguments:")
    print("	inputfile1	  - the name of the first input nifti file")
    print("	maskfile1	  - the name of the first input nifti mask file")
    print("	inputfile2	  - the name of the second input nifti file")
    print("	maskfile2	  - the name of the second input nifti mask file")
    print("	outputfile	  - the name of the output text file")
    print("")
    print("optional arguments:")
    print("	-l		          - perform linear fit only")
    print("	-d, --nodisplay   - save graphs to file only - do not display")
    print("")
    return ()


def main():
    # set default variable values
    display = True
    fastfilter = True
    linfitonly = False
    order = 3

    # get the command line parameters
    if len(sys.argv) < 6:
        usage()
        exit()

    # handle required args first
    inputfilename1 = sys.argv[1]
    maskfilename1 = sys.argv[2]
    inputfilename2 = sys.argv[3]
    maskfilename2 = sys.argv[4]
    outputfilename = sys.argv[5]

    # now scan for optional arguments
    try:
        opts, args = getopt.getopt(sys.argv[6:], "ld", ["nodisplay", "help"])
    except getopt.GetoptError as err:
        # print help information and exit:
        print(str(err))  # will print something like "option -x not recognized"
        usage()
        sys.exit(2)

    for o, a in opts:
        if o == "-l":
            linfitonly = True
        elif o == "-d" or o == "--nodisplay":
            display = False
        else:
            assert False, "unhandled option"

    input1_img, input1_data, input1_hdr, thedims1, thesizes1 = tide_io.readfromnifti(
        inputfilename1
    )
    (
        mask1_img,
        mask1_data,
        mask1_hdr,
        themaskdims1,
        themasksizes1,
    ) = tide_io.readfromnifti(maskfilename1)

    if not tide_io.checkspacedimmatch(thedims1, themaskdims1):
        print("input image 1 dimensions do not match mask")
        exit()

    input2_img, input2_data, input2_hdr, thedims2, thesizes2 = tide_io.readfromnifti(
        inputfilename2
    )
    (
        mask2_img,
        mask2_data,
        mask2_hdr,
        themaskdims2,
        themasksizes2,
    ) = tide_io.readfromnifti(maskfilename2)

    if not tide_io.checkspacedimmatch(thedims2, themaskdims2):
        print("input image 2 dimensions do not match mask")
        exit()

    if not tide_io.checkspacedimmatch(thedims1, thedims2):
        print("input images 1 and 2 dimensions do not match")
        exit()

    totalmask = mask1_data * mask2_data
    nonzeropoints = np.where(totalmask > 0)
    pairlist = []
    for i in range(0, len(nonzeropoints[0])):
        pairlist.append(
            [
                input1_data[
                    nonzeropoints[0][i], nonzeropoints[1][i], nonzeropoints[2][i]
                ],
                input2_data[
                    nonzeropoints[0][i], nonzeropoints[1][i], nonzeropoints[2][i]
                ],
            ]
        )

    thearray = np.asarray(pairlist)

    # construct a 2d histogram
    numbins = 100
    H, xedges, yedges = np.histogram2d(
        thearray[:, 0], thearray[:, 1], bins=numbins, normed=True
    )
    extent = [yedges[0], yedges[-1], xedges[0], xedges[-1]]
    plt.figure()
    cset = plt.contour(H, extent=extent)
    # plt.plot(thearray[:,0], thearray[:,1], 'k.')
    if display:
        plt.show()
    else:
        plt.savefig(outputfilename + "_contourplot.png", bbox_inches="tight")

    # now fit the line
    fitorder = 1
    try:
        thecoffs = np.polyfit(np.array(pairlist[0]), np.array(pairlist[1]), fitorder)
    except RankWarning:
        thecoffs = [0.0, 0.0]
    print("thecoffs=", thecoffs)
    with open(outputfilename + "_linfit", "w") as file:
        file.writelines(str(thecoffs))

    if not linfitonly:
        with open(outputfilename, "w") as file:
            for pair in pairlist:
                file.writelines(str(pair[0]) + "\t" + str(pair[1]) + "\n")
        plt.figure()
        bland_altman_plot(thearray[:, 0], thearray[:, 1])
        plt.title("Bland-Altman Plot")
        if display:
            plt.show()
        else:
            plt.savefig(outputfilename + "_blandaltman.png", bbox_inches="tight")


if __name__ == "__main__":
    main()
