#!/usr/bin/env python
#
#   Copyright 2016 Blaise Frederick
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
#       $Author: frederic $
#       $Date: 2016/06/14 12:04:50 $
#       $Id: linfit,v 1.4 2016/06/14 12:04:50 frederic Exp $
#
from __future__ import print_function, division
import numpy as np
import getopt
import rapidtide.io as tide_io
import rapidtide.fit as tide_fit

from matplotlib.pyplot import *
import nibabel as nib


def usage():
    print(
        "usage: spatialfit datafile [--dmask=DATAMASK] templatefile [--tmask=TEMPLATEMASK] outputroot [--order=ORDER]")
    print("")
    print("required arguments:")
    print("	datafile	- the name of the 3 or 4 dimensional nifti file to fit")
    print("	templatefile	- the name of the 3 dimensional nifti file to use as a template")
    print("	outputroot	- the root name of the output nifti files")
    print("")
    print("optional arguments:")
    print("	--dmask=DATAMASK	- use DATAMASK to specify which voxels in the data to use")
    print("	--tmask=TEMPLATEMASK	- use TEMPLATEMASK to specify which voxels in the template to use")
    print("	--order=ORDER   	- fit up to ORDER order - default is 1 - linear")
    print("")
    return ()


# set default variable values
usedmask = False
usetmask = False
order = 1

# parse command line arguments
try:
    opts, args = getopt.gnu_getopt(sys.argv, 'h', ["help", "dmask=", "tmask=", "order="])
except getopt.GetoptError as err:
    # print(help information and exit:
    print(str(err))  # will print something like "option -a not recognized"
    usage()
    sys.exit(2)

# handle required args first
if len(args) != 4:
    print('spatial fit has 3 required arguments - ', len(args) - 1, 'found')
    usage()
    sys.exit()

datafilename = args[1]
templatefilename = args[2]
outputrootname = args[3]

print(datafilename, templatefilename, outputrootname)

for o, a in opts:
    if o == "--dmask":
        usedmask = True
        datamaskname = a
        print('using', datamaskname, 'as data mask')
    elif o == "--tmask":
        usetmask = True
        templatemaskname = a
        print('using', templatemaskname, 'as template mask')
    elif o == "--order":
        order = int(a)
        if not (0 <= order <= 4):
            print('order should be between 0 and 4')
            sys.exit()
        if order == 1:
            print('fitting to 1st order')
        else:
            print('fitting to', order, 'th order')
    elif o in ("-h", "--help"):
        usage()
        sys.exit()
    else:
        assert False, "unhandled option"

# read in data
print("reading in data arrays")
datafile_img = nib.load(datafilename)
datafile_data = datafile_img.get_data()
datafile_hdr = datafile_img.get_header()
datafiledims = datafile_hdr['dim']
datafilesizes = datafile_hdr['pixdim']

if usedmask:
    datamask_img = nib.load(datamaskname)
    datamask_data = datamask_img.get_data()
    datamask_hdr = datamask_img.get_header()
    datamaskdims = datamask_hdr['dim']
    datamasksizes = datamask_hdr['pixdim']

templatefile_img = nib.load(templatefilename)
templatefile_data = templatefile_img.get_data()
templatefile_hdr = templatefile_img.get_header()
templatefiledims = templatefile_hdr['dim']
templatefilesizes = templatefile_hdr['pixdim']

if usetmask:
    templatemask_img = nib.load(templatemaskname)
    templatemask_data = templatemask_img.get_data()
    templatemask_hdr = templatemask_img.get_header()
    templatemaskdims = templatemask_hdr['dim']
    templatemasksizes = templatemask_hdr['pixdim']

xsize = datafiledims[1]
ysize = datafiledims[2]
numslices = datafiledims[3]
timepoints = datafiledims[4]

# check dimensions
print("checking dimensions")
if not tide_io.checkspacedimmatch(datafiledims, templatefiledims):
    print(templatefiledims, 'template file spatial dimensions do not match image')
    exit()
if not templatefiledims[4] == 1:
    print('template file time dimension is not equal to 1')
    exit()

if usedmask:
    if not tide_io.checkspacedimmatch(datafiledims, datamaskdims):
        print('input mask spatial dimensions do not match image')
        exit()
    if not tide_io.checktimematch(datafiledims, datamaskdims):
        print('input mask time dimension does not match image')
        exit()

if usetmask:
    if not tide_io.checkspacedimmatch(datafiledims, templatemaskdims):
        print('template mask spatial dimensions do not match image')
        exit()
    if not templatemaskdims[4] == 1:
        print('template mask time dimension is not equal to 1')
        exit()

# allocating arrays
print("allocating arrays")
numspatiallocs = int(xsize) * int(ysize) * int(numslices)
rs_datafile = datafile_data.reshape((numspatiallocs, timepoints))
if usedmask:
    rs_datamask = datamask_data.reshape((numspatiallocs, timepoints))
else:
    rs_datamask = np.ones((numspatiallocs, timepoints), dtype='float')
bin_datamask = np.where(rs_datamask > 0.9, 1.0, 0.0)

rs_templatefile = templatefile_data.reshape((numspatiallocs))
if usetmask:
    rs_templatemask = templatemask_data.reshape((numspatiallocs))
else:
    rs_templatemask = np.ones((numspatiallocs, timepoints), dtype='float')

bin_templatemask = np.where(rs_templatemask > 0.1, 1.0, 0.0)

fitdata = np.zeros((numspatiallocs, timepoints), dtype='float')
residuals = np.zeros((numspatiallocs, timepoints), dtype='float')
normalized = np.zeros((numspatiallocs, timepoints), dtype='float')
newtemplate = np.zeros((numspatiallocs), dtype='float')
newmask = np.zeros((numspatiallocs), dtype='float')
lincoffs = np.zeros((timepoints), dtype='float')
offsets = np.zeros((timepoints), dtype='float')
rvals = np.zeros((timepoints), dtype='float')

# mask everything
print('masking data and template')
maskeddata = rs_datafile * bin_datamask
maskedtemplate = rs_templatefile * bin_templatemask

# cycle over all images
print("now cycling over all images")
for thetime in range(0, timepoints):
    thefit, R = tide_fit.mlregress(maskedtemplate, maskeddata[:, thetime])
    lincoffs[thetime] = thefit[0, 1]
    offsets[thetime] = thefit[0, 0]
    rvals[thetime] = R
    fitdata[:, thetime] = lincoffs[thetime] * maskedtemplate * bin_datamask[:, thetime]
    newtemplate += np.nan_to_num(maskeddata[:, thetime] / lincoffs[thetime]) * rs_datamask[:, thetime]
    newmask += rs_datamask[:, thetime] * bin_templatemask
    normalized[:, thetime] = (rs_datafile[:, thetime] - offsets[thetime]) / lincoffs[thetime]
residuals = rs_datafile - fitdata

# write out the data files
print("writing time series")
tide_io.writenpvecs(lincoffs, outputrootname + '_lincoffs.txt')
tide_io.writenpvecs(offsets, outputrootname + '_offsets.txt')
tide_io.writenpvecs(rvals, outputrootname + '_rvals.txt')
print("slope mean, std:", np.mean(lincoffs), np.std(lincoffs))
print("offset mean, std:", np.mean(offsets), np.std(offsets))

print("writing nifti series")
tide_io.savetonifti(fitdata.reshape((xsize, ysize, numslices, timepoints)), datafile_hdr, datafilesizes,
                    outputrootname + '_fit')
tide_io.savetonifti(residuals.reshape((xsize, ysize, numslices, timepoints)), datafile_hdr, datafilesizes,
                    outputrootname + '_residuals')
tide_io.savetonifti(normalized.reshape((xsize, ysize, numslices, timepoints)), datafile_hdr, datafilesizes,
                    outputrootname + '_normalized')
newtemplate = np.where(newmask > 0, newtemplate / newmask, 0.0)
tide_io.savetonifti(newtemplate.reshape((xsize, ysize, numslices)), templatefile_hdr, templatefilesizes,
                    outputrootname + '_newtemplate')
